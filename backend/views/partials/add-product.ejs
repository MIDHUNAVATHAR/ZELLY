
      <h1>ADD PRODUCT...</h1>
      <hr>

      <!-- Add Product Form -->
      <form action="/admin/addProductPost" method="POST"  enctype="multipart/form-data" id="form">  
        <div class="mb-4">
          <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
          <input type="text" name="title" id="title" class="mt-1 p-2 border border-gray-300 rounded w-full" >  
        </div>
        <div class="mb-4">
          <label for="titleDescription" class="block text-sm font-medium text-gray-700">Title Description</label>
          <input type="text" name="titleDescription" id="titleDescription" class="mt-1 p-2 border border-gray-300 rounded w-full" >
        </div>


        <div class="mb-4">
          <label for="productDescription" class="block text-sm font-medium text-gray-700">Product Description</label>
          <textarea name="productDescription" id="productDescription" class="mt-1 p-2 border border-gray-300 rounded w-full"></textarea>
        </div>
        <div class="mb-4">
          <label for="highlights" class="block text-sm font-medium text-gray-700">Highlights</label>
          <textarea name="highlights" id="highlights" class="mt-1 p-2 border border-gray-300 rounded w-full" ></textarea>
        </div>
        <div class="mb-4">
          <label for="details" class="block text-sm font-medium text-gray-700">Details</label>
          <textarea name="details" id="details" class="mt-1 p-2 border border-gray-300 rounded w-full" ></textarea>
        </div>

        <!---------------------- SIZE TABLE ----------------------->
          <div class="overflow-x-auto">
            <table id="productTable" class="min-w-full bg-white border border-gray-300">
                <thead class="bg-gray-200">
                    <tr>
                        <th class="py-2 px-4 border-b">Size</th>
                        <th class="py-2 px-4 border-b">Quantity</th>
                        <th class="py-2 px-4 border-b">Price</th>
                        <th class="py-2 px-4 border-b">Discounted Price</th>
                        <th class="py-2 px-4 border-b">Discount Percentage</th>
                        <th class="py-2 px-4 border-b">Action</th>
                    </tr>
                </thead>
                <tbody>
                   

                </tbody>
            </table>
        </div>
        
        <div class="mt-4">
            <button type="button" onclick="addRow()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Add Row</button>
        </div>
        <!----------------------------------------->

        <div class="mb-4 mt-10"> 
          <label for="genderCategory" class="block text-sm font-medium text-gray-700">Gender Category</label>
          <select name="genderCategory" id="genderCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
            <% genderCategories.forEach(gender => { %>
              <option value="<%= gender._id %>"><%= gender.name %></option> 
            <% }) %>
          </select>
        </div>
        <div class="mb-4">
          <label for="productCategory" class="block text-sm font-medium text-gray-700">Product Category</label>
          <select name="productCategory" id="productCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
            <% productCategories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %> - <%= category.genderCategory.name %></option>
            <% }) %>
          </select>
        </div> 
        <div class="mb-4">
          <label for="productSubCategory" class="block text-sm font-medium text-gray-700">Product Sub Category</label>
          <select name="productSubCategory" id="productSubCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
            <% productSubCategories.forEach(subCategory => { %>
              <option value="<%= subCategory._id %>"><%= subCategory.name %></option>
            <% }) %>
          </select>
        </div>
        <div class="mb-4">  
          <label for="images" class="block text-sm font-medium text-gray-700">Product Images</label>
          <input type="file" name="productImages" id="productImages" class="mt-1 p-2 border border-gray-300 rounded w-full">
          <label class="productImgErr text-red-500"></label>
        </div> 

        <!-- cropping contiainer -->
      <div id="cropperContainer" style="display: none; max-width: 500px; margin-bottom: 20px;"> 
        <img id="image" src="" alt="Image for cropping" style="max-width: 100%;">  
      </div>
      <!--cropping container--> 

      
       <!-- Cropped images preview container -->
       <div id="croppedImagesContainer" class="mb-4">
       <h3 class="text-sm font-medium text-gray-700">Cropped Images</h3>
       <div id="croppedImages" class="flex flex-wrap"></div>
       </div>

      <button type="button" id="cropButton" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Crop & Upload</button>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Product</button> 
      </form>
    </div> 
  </div> 

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

  <script>

let cropper;
        const inputImage = document.getElementById('productImages');
        const image = document.getElementById('image');
        const cropButton = document.getElementById('cropButton') ; 
        const cropperContainer = document.getElementById('cropperContainer');
        const croppedImagesContainer = document.getElementById('croppedImages');
        let croppedImagesData = [];

        inputImage.addEventListener('change', (event) => {
            const files = event.target.files; 
            if (files && files.length > 0) {
                const file = files[0];
                const reader = new FileReader(); 
                reader.onload = (e) => {
                    image.src = e.target.result; 
                    cropperContainer.style.display = 'block'; 
                    cropButton.style.display = 'inline-block';
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(image, {
                        aspectRatio: NaN,
                        viewMode: 1,
                        dragMode: 'move',
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        minCropBoxWidth: 50,
                        minCropBoxHeight: 50,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropButton.addEventListener('click', () => {
            if (!cropper) {
                alert('Please select an image first.');
                return;
            }

            cropper.getCroppedCanvas().toBlob((blob) => {
                croppedImagesData.push(blob);

                const url = URL.createObjectURL(blob);
                const imgElement = document.createElement('img');
                imgElement.src = url;
                imgElement.style.maxWidth = '100px';
                imgElement.style.margin = '10px';
                croppedImagesContainer.appendChild(imgElement) ;

                cropperContainer.style.display = 'none';
                cropButton.style.display = 'none'; 
                inputImage.value = '';
                inputImage.disabled = false; 
            }, 'image/png');
        });

        document.getElementById('form').addEventListener('submit', function(event) {
            event.preventDefault();

            const formData = new FormData(this);
            formData.delete('productImages'); 

      
            
     
      // const sizes = [];

      // const sizeNames = formData.getAll('size[]');
      // const prices = formData.getAll('price[]');
      // const quantities = formData.getAll('quantity[]');
      // const discountedPrices = formData.getAll('discountedPrice[]');
      // const discountPercentages = formData.getAll('discountPercentage[]'); 

      // sizeNames.forEach((size, index) => {
      //   sizes.push({
      //     [size]: {
      //       price: prices[index],
      //       quantity: quantities[index],
      //       discountedPrice: discountedPrices[index],
      //       discountPercentage: discountPercentages[index],
      //     }
      //   });
      // });
        
    
            croppedImagesData.forEach((blob , index) => {
                formData.append(`productImages`, blob, `cropped_${index}.png`)  ;
            });  

            fetch(this.action, {
                method: 'POST',
                body: formData,
            }).then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert(data.message);
                    location.reload();
                } else {
                    alert('Failed to add product: ' + data.error); 
                }
            }).catch(error => {
                console.error( ' Error : ' , error );
                alert( ' Failed to add product ' ) ; 
            });
        });


        //add product size details
        function addRow() {

        const table = document.getElementById('productTable').getElementsByTagName('tbody')[0];
        const rowCount = table.rows.length ;
        const newRow = table.insertRow() ;
    
        newRow.innerHTML = `
            <td><input type="text"  name="size[]" class="border border-gray-300 p-1"></td>
            <td><input type="number" name="quantity[]" class="border border-gray-300 p-1" min="0"></td>
            <td><input type="number" name="price[]" class="border border-gray-300 p-1" min="0"></td>
            <td><input type="number" name="discountedPrice[]" class="border border-gray-300 p-1" min="0"></td>
            <td><input type="number" name="discountedPercentage[]" class="border border-gray-300 p-1" min="0"></td>
            <td><button type="button" class="text-red-500" onclick="deleteRow(this)">Delete</button></td>
        `;
        }

        function deleteRow(button) {
            const row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);
        }
  </script> 
 