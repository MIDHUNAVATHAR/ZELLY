<div class="p-4">
<h1>  Edit PRODUCT...</h1>
<hr>

<!-- Edit Product Form -->
<form action="/admin/editProductPost/<%= product._id %>" method="POST"  enctype="multipart/form-data" id="form">    
  <div class="mb-4">
    <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
    <input type="text" name="title" value="<%=product.title %>" id="title" class="mt-1 p-2 border border-gray-300 rounded w-full" >
  </div>
  <div class="mb-4">
    <label for="titleDescription" class="block text-sm font-medium text-gray-700">Title Description</label>
    <input type="text" name="titleDescription" value="<%=product.titleDescription %>" id="titleDescription" class="mt-1 p-2 border border-gray-300 rounded w-full" >
  </div>
  <div class="container mx-auto p-4">
    <table class="table-auto w-full border-collapse border border-gray-200">
        <thead class="bg-gray-100">
            <tr>
                <th class="border border-gray-300 p-2">Size</th>
                <th class="border border-gray-300 p-2">Quantity</th>
                <th class="border border-gray-300 p-2">Price</th>
                <th class="border border-gray-300 p-2">Discounted Price</th>   
                <th class="border border-gray-300 p-2">Discount Percentage</th>
                <th class="border border-gray-300 p-2">Action</th>
            </tr>
        </thead>
        <tbody id="table-body">
            <% product.sizes.forEach(function(size, index) { %>
            <tr>
                <td class="border border-gray-300 p-2">
                    <input type="text" name="size[]" value="<%= size.size %>" class="w-full p-1 border border-gray-300">
                </td>
                <td class="border border-gray-300 p-2">
                    <input type="number" name="quantity[]" value="<%= size.quantity %>" class="w-full p-1 border border-gray-300">
                </td>
                <td class="border border-gray-300 p-2">
                    <input type="number" name="price[]" value="<%= size.price %>" class="w-full p-1 border border-gray-300">
                </td>
                <td class="border border-gray-300 p-2">
                    <input type="number" name="discountedPrice[]" value="<%= size.discountedPrice %>" class="w-full p-1 border border-gray-300">
                </td>
                <td class="border border-gray-300 p-2">
                    <input type="number" name="discountedPercentage[]" value="<%= size.discountedPercentage %>" class="w-full p-1 border border-gray-300">
                </td>
                <td class="border border-gray-300 p-2 text-red-500">
                    <button class="text-red-500 hover:underline" onclick="deleteRow('<%= size._id %> ')">Delete</button>
                </td>
            </tr>
            <% }) %>
        </tbody>
    </table>

    <button id="addRowButton" class="mt-4 p-2 bg-blue-500 text-white rounded">Add Row</button>


</div>

  <div class="mb-4">
    <label for="productDescription" class="block text-sm font-medium text-gray-700">Product Description</label>
    <textarea name="productDescription" id="productDescription"  class="mt-1 p-2 border border-gray-300 rounded w-full"> <%=product.productDescription %> </textarea>
  </div>
  <div class="mb-4">
    <label for="highlights" class="block text-sm font-medium text-gray-700">Highlights</label>
    <textarea name="highlights" id="highlights"  class="mt-1 p-2 border border-gray-300 rounded w-full" > <%=product.highlights %> </textarea>
  </div>
  <div class="mb-4">
    <label for="details" class="block text-sm font-medium text-gray-700">Details</label>
    <textarea name="details" id="details"  class="mt-1 p-2 border border-gray-300 rounded w-full" > <%=product.details%> </textarea>
  </div>
  <div class="mb-4"> 
    <label for="genderCategory" class="block text-sm font-medium text-gray-700">Gender Category</label>
    <select name="genderCategory" id="genderCategory"  class="mt-1 p-2 border border-gray-300 rounded w-full">
      <% genderCategories.forEach(gender => { %>
        <option  value="<%= gender._id  %>" <%= gender._id.toString() === product.genderCategory._id.toString() ? 'selected' : '' %> ><%= gender.name %> </option>  
      <% }) %>
    </select>
  </div>
  <div class="mb-4">
    <label for="productCategory" class="block text-sm font-medium text-gray-700">Product Category</label>
    <select name="productCategory" id="productCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
      <% productCategories.forEach(category => { %>
        <option value="<%= category._id %>" <%= category._id.toString() === product.productCategory._id.toString() ? 'selected' : '' %> ><%= category.name %> - <%= category.genderCategory.name %></option>
      <% }) %>
    </select>
  </div> 
  <div class="mb-4">
    <label for="productSubCategory" class="block text-sm font-medium text-gray-700">Product Sub Category</label>
    <select name="productSubCategory" id="productSubCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
      <% productSubCategories.forEach(subCategory => { %>
        <option value="<%= subCategory._id %>"  <%= product.productSubCategory.some(ps => ps._id.toString() === subCategory._id.toString()) ? 'selected' : ''%>  > <%= subCategory.name %></option>
      <% }) %>
    </select>
  </div>

  <h2 class="text-xl font-bold mb-4">Uploaded Images</h2>
  <div class="grid grid-cols-10 gap-4"> 
    <% if (product.images.length > 0) { %>  
       
      <% product.images.forEach(l => { %>
      
        <div class="relative">
          <img src="<%= l %>" alt="image" >     
          <button class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="deleteImage('<%= l %>')">X</button>
        </div>
      <% }) %>
    <% } else { %>
      <p>No images available</p>
    <% } %> 
  </div>

  <div class="mb-4">  
    <label for="images" class="block text-sm font-medium text-gray-700">Product Images</label>
    <input type="file" name="productImages" id="productImages" class="mt-1 p-2 border border-gray-300 rounded w-full"> 
    <label class="productImgErr text-red-500"></label>
  </div> 
  <!-- cropping contiainer -->
<div id="cropperContainer" style="display: none; max-width: 500px; margin-bottom: 20px;"> 
  <img id="image" src="" alt="Image for cropping" style="max-width: 100%;">  
</div>
<!--cropping container--> 

 <!-- Cropped images preview container -->
 <div id="croppedImagesContainer" class="mb-4">
 <h3 class="text-sm font-medium text-gray-700">Cropped Images</h3>
 <div id="croppedImages" class="flex flex-wrap"></div>
 </div>

  <button type="button" id="cropButton" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Crop & Upload</button>
  <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Save Changes</button> 
</form>
</div> 


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>

let cropper;
  const inputImage = document.getElementById('productImages');
  const image = document.getElementById('image');  
  const cropButton = document.getElementById('cropButton');
  const cropperContainer = document.getElementById('cropperContainer');
  const croppedImagesContainer = document.getElementById('croppedImages');
  let croppedImagesData = [] ;  

  inputImage.addEventListener('change', (event) => {
      const files = event.target.files;
      if (files && files.length > 0) {
          const file = files[0];
          const reader = new FileReader();
          reader.onload = (e) => {
              image.src = e.target.result;
              cropperContainer.style.display = 'block';
              cropButton.style.display = 'inline-block';
              if (cropper) {
                  cropper.destroy();
              }
              cropper = new Cropper(image, {
                  aspectRatio: NaN,
                  viewMode: 1,
                  dragMode: 'move',
                  cropBoxMovable: true,
                  cropBoxResizable: true,
                  minCropBoxWidth: 50,
                  minCropBoxHeight: 50,
              });
          };
          reader.readAsDataURL(file);
      }
  });

  cropButton.addEventListener('click', () => {
      if (!cropper) {
          alert('Please select an image first.');
          return;
      }

      cropper.getCroppedCanvas().toBlob((blob) => {
          croppedImagesData.push(blob);

          const url = URL.createObjectURL(blob);
          const imgElement = document.createElement('img');
          imgElement.src = url;
          imgElement.style.maxWidth = '100px';
          imgElement.style.margin = '10px';
          croppedImagesContainer.appendChild(imgElement) ;

          cropperContainer.style.display = 'none';
          cropButton.style.display = 'none'; 
          inputImage.value = '';
          inputImage.disabled = false;
      }, 'image/png');
  });

  

 //delete the size objects in sizes array
 function deleteRow(s_id) {
  event.preventDefault();
  const p_id = '<%= product._id %>' ; 

  fetch(`/admin/products/${p_id}/sizes/${s_id}`,{method :'DELETE' })
  .then(response => response.json())
  .then(data => {
    alert( data.message ) ; 
    window.location.reload();
  })
  .catch(error => {
    console.error('Error:', error);
  });
}


//delete image 
function deleteImage(imgsrc){
   event.preventDefault(); 
   const p_id = '<%= product._id %>' ; 
   fetch("/admin/delete-product-image",{
    method : "DELETE",
    headers : { 'Content-Type' : 'application/json' },
    body : JSON.stringify( { imgSrc : imgsrc , productId : p_id }) ,  
   })
   .then(response => response.json())
   .then(data =>{
       alert(data.message);
       window.location.reload();
   })
   .catch(err=>{
    console.error("Error : " ,err );
   })
}



//add rows ;
document.getElementById('addRowButton').addEventListener( 'click' , function() {
    event.preventDefault() ; 
    const tableBody = document.getElementById('table-body') ; 
    const newRow = document.createElement('tr') ; 

    newRow.innerHTML = `
        <td class="border border-gray-300 p-2">
            <input type="text" name="size[]" class="w-full p-1 border border-gray-300" placeholder="Size" required >
        </td>
        <td class="border border-gray-300 p-2">
            <input type="number" name="quantity[]" class="w-full p-1 border border-gray-300" placeholder="Quantity" required>
        </td>
        <td class="border border-gray-300 p-2">
            <input type="number" name="price[]" class="w-full p-1 border border-gray-300" placeholder="Price" required>
        </td>
        <td class="border border-gray-300 p-2">
            <input type="number" name="discountedPrice[]" class="w-full p-1 border border-gray-300" placeholder="Discounted Price" required>
        </td>
        <td class="border border-gray-300 p-2">
            <input type="number" name="discountedPercentage[]" class="w-full p-1 border border-gray-300" placeholder="Discount Percentage" required>
        </td>
        <td class="border border-gray-300 p-2 text-red-500">
            <button class="text-red-500 hover:underline" onclick="this.closest('tr').remove()">Delete</button>
        </td>
    `;

    tableBody.appendChild(newRow) ; 
});






//submit the form

  document.getElementById('form').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission behavior 

    const formData = new FormData(this) ; 
    formData.delete('productImages'); // Remove the default file input field data

    // Append the cropped images to the form data
    croppedImagesData.forEach((blob, index) => {
        formData.append(`productImages`, blob, `cropped_${index}.png`) ; 
    });

    fetch(this.action, {
        method: 'POST',
        body: formData,
    }).then(response => response.json())
    .then(data => {
        if (data.message) {
            alert('Product updated successfully!');
           window.location.reload() ;  
            // Optionally, you can redirect or refresh the page here
        } else if (data.error) {
            alert(`Error: ${data.error}`);
        }
    }).catch(error => {
        console.error('Error:', error);
        alert('Failed to update product. Please try again later.');
    });
});


  

</script> 
