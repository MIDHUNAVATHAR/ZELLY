
<!--logo -->

<div class=" w-full bg-white p-6 rounded-lg shadow-lg">
    <h1 class="text-2xl font-bold mb-4">Upload Logo</h1>
    <form action="/admin/uploadLogo" method="post" enctype="multipart/form-data" class="mb-4" id="uploadForm">
      <div class="mb-4">
        <label for="logo" class="block text-sm font-medium text-gray-700 mb-2">Choose File</label>
        <input type="file" name="logo" id="logo" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100" required>
      </div>
      <!-- cropping contiainer -->
      <div id="cropperContainer" style="display: none; max-width: 500px; margin-bottom: 20px;"> 
        <img id="image" src="" alt="Image for cropping" style="max-width: 100%;"> 
      </div>
      <!--cropping container--> 
      <button type="button" id="cropButton" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Crop & Upload</button>
    </form>
    <!-- Select Dropdown for Logos --> 
    <div class="mt-4">
      <label for="selectLogo" class="block text-sm font-medium text-gray-700 mb-2">Select Logo for Header</label>
      <select id="selectLogo" class="block w-full p-2 border border-gray-300 rounded">
          <option value="">-- Select a Logo --</option>
          <% if (logo && logo.length > 0) { %>
              <% logo.forEach(l => { %>
                  <option value="<%= l._id %>">Logo <%= l._id %></option>
              <% }) %>
          <% } %>
      </select>
  </div>

    <h2 class="text-xl font-bold mb-4">Uploaded Logos</h2>
    <div class="grid grid-cols-10 gap-4">
      <% if (logo && logo.length > 0) { %>  
        <% logo.forEach(l => { %>
          <div class="relative">
            <img src="<%= l.image.data %>" alt="Logo"> 
            <button class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="deleteImage('logo', '<%= l._id %>')">X</button>
          </div>
        <% }) %>
      <% } else { %>
        <p>No logo available</p>
      <% } %> 
    </div>
</div>

<!--banner images-->
<div class=" w-full bg-white p-6 rounded-lg shadow-lg">
  <h1 class="text-2xl font-bold mb-4">Upload Banner Images</h1>
  <form action="/admin/uploadBanner" method="post" enctype="multipart/form-data" class="mb-4" id="uploadForm2">
    <div class="mb-4">
      <label for="banner" class="block text-sm font-medium text-gray-700 mb-2">Choose File</label>
      <input type="file" name="banner" id="banner" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100" required>
    </div>
    <!-- cropping contiainer -->
    <div id="cropperContainer2" style="display: none; max-width: 500px; margin-bottom: 20px;">  
      <img id="image2" src="" alt="Image for cropping" style="max-width: 100%;"> 
    </div>
    <!--cropping container-->
    <button type="button" id="cropButton2" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Crop & Upload</button>
  </form>

  <!-- Select Dropdown for Logos -->
  <div class="mt-4">
    <label for="selectBanner" class="block text-sm font-medium text-gray-700 mb-2">Select Banner for Main Page</label>
    <select id="selectBanner" class="block w-full p-2 border border-gray-300 rounded">  
        <option value="">-- Select a Banner --</option>
        <% if (banner && banner.length > 0) { %>   
            <% banner.forEach(l => { %>    
                <option value="<%= l._id %>">Banner <%= l._id %></option>  
            <% }) %>
        <% } %>
    </select>
</div>

  <h2 class="text-xl font-bold mb-4">Uploaded Banners</h2>
  <div class="grid grid-cols-10 gap-4">
    <% if (banner && banner.length > 0) { %>  
      <% banner.forEach(l => { %>
        <div class="relative">
          <img src="<%= l.image.data %>" alt="banner">     
          <button class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="deleteImage('banner', '<%= l._id %>')">X</button>
        </div>
      <% }) %>
    <% } else { %>
      <p>No images available</p>
    <% } %> 
  </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
  //logo 
    let cropper;
    const inputImage = document.getElementById('logo'); 
    const image = document.getElementById('image');
    const cropButton = document.getElementById('cropButton');
    const uploadForm = document.getElementById('uploadForm');
    const cropperContainer = document.getElementById('cropperContainer');  

    inputImage.addEventListener('change', (event) => {
        const files = event.target.files;
        if (files && files.length > 0) {
            const file = files[0];
            const reader = new FileReader();
            reader.onload = (e) => {
                image.src = e.target.result;
                cropperContainer.style.display = 'block';
                cropButton.style.display = 'inline-block';
                if (cropper) {
                    cropper.destroy();
                }
                cropper = new Cropper(image, {
                    aspectRatio: NaN, // Free aspect ratio
                    viewMode: 1,
                    dragMode: 'move',
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    minCropBoxWidth: 50,
                    minCropBoxHeight: 50,
                });
            };
            reader.readAsDataURL(file);
        }
    });

    cropButton.addEventListener('click', () => {
        if (!cropper) {  
            alert('Please select an image first.');
            return; 
        }

        cropper.getCroppedCanvas().toBlob((blob) => {
            const formData = new FormData(uploadForm);     
            formData.set('logo', blob, 'cropped.png') ; 

            fetch('/admin/uploadLogo', {
                method: 'POST', 
                body: formData,
            }).then(response => {
                if (response.ok) {
                    alert('Upload successful'); 
                    location.reload(); // Reload the page to show the new logo
                } else {
                    alert('Upload failed');
                }
            }).catch(error => {
                console.error('Upload error:', error); 
                alert('Upload failed');
            });
        }, 'image/png');
    });

    //banner
    let cropper2;
    const inputBanner = document.getElementById('banner'); 
    const banner = document.getElementById('image2');
    const cropButton2 = document.getElementById('cropButton2');
    const uploadForm2 = document.getElementById('uploadForm2');
    const cropperContainer2 = document.getElementById('cropperContainer2');

    inputBanner.addEventListener('change', (event) => {
        const files = event.target.files;
        if (files && files.length > 0) {
            const file = files[0];
            const reader = new FileReader();
            reader.onload = (e) => {
                banner.src = e.target.result; 
                cropperContainer2.style.display = 'block';
                cropButton2.style.display = 'inline-block';
                if (cropper2) {
                    cropper.destroy();
                }
                cropper2 = new Cropper(image2, {
                    aspectRatio: NaN, // Free aspect ratio
                    viewMode: 1,
                    dragMode: 'move',
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    minCropBoxWidth: 50,
                    minCropBoxHeight: 50,
                });
            };
            reader.readAsDataURL(file);
        }
    });

    cropButton2.addEventListener('click', () => {
        if (!cropper2) {  
            alert('Please select an image first.');
            return;
        }

        cropper2.getCroppedCanvas().toBlob((blob) => {
            const formData = new FormData(uploadForm2);
            formData.set('banner', blob, 'cropped.png');

            fetch('/admin/uploadBanner', {
                method: 'POST',
                body: formData,
            }).then(response => {
                if (response.ok) {
                    alert('Upload successful'); 
                    location.reload(); // Reload the page to show the new logo
                } else {
                    alert('Upload failed');
                }
            }).catch(error => {                                                                                                         
                console.error('Upload error:', error);
                alert('Upload failed');
            });
        }, 'image/png');
    });


    //delete logo and banner iamges
    function deleteImage(type, id) {
    if (confirm('Are you sure you want to delete this image?')) {
        fetch(`/admin/deleteImage/${type}/${id}`, { 
            method: 'DELETE',
        })
        .then(response => { 
            if (response.ok) {
                alert('Image deleted successfully') ;   
                location.reload(); // Reload the page to reflect the changes
            } else {
                alert('Failed to delete image');
            }
        })
        .catch(error => {
            console.error('Delete error:', error);
            alert('Failed to delete image');
        });
    }
}


// change the logo date to date.now;
document.getElementById("selectLogo").addEventListener("change" , function(){
  
  var selectedLogoId = this.value;
  

if (selectedLogoId) {
    

    // Send AJAX request to update the logo date
    fetch('/admin/updateLogoDate', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ logoId  : selectedLogoId })   
    }).then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Logo date updated successfully!');  
        } else {
            alert('Failed to update logo date.');
        }
    }).catch(error => {
        console.error('Error:', error);
    });
} else {
    console.error('No logo selected or invalid selection.');
}
 })


// change the Banner date to date.now ; 
document.getElementById("selectBanner").addEventListener("change" , function(){
  
  var selectedBannerId = this.value;
  console.log(selectedBannerId);

   if(selectedBannerId) {
    

    // Send AJAX request to update the Banner date
    fetch('/admin/updateBannerDate', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ bannerId  : selectedBannerId })   
    }).then(response => response.json())
    .then(data => {
        if (data.success) { 
            alert('Banner date updated successfully!');  
        } else {
            alert('Failed to update Banner date.');
        }
    }).catch(error => {
        console.error('Error:', error);
    });
} else {
    console.error('No Banner selected or invalid selection.');
}
 })
</script> 